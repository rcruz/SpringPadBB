(function () {
/**
 * almond 0.2.4 Copyright (c) 2011-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);

                name = baseParts.concat(name.split("/"));

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (typeof callback === 'function') {

            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback.apply(defined[name], args);

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        config = cfg;
        return req;
    };

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("../../dependencies/almond", function(){});

define('settings',['require','exports','module'],function (require, exports, module) {
module.exports = {
    "auth": {
        "username": null, 
        "password": null, 
        "consumerKey" : null, 
        "consumerPrivateKey": null,
        "accessToken": null 
    }
};
});

define('utils',['require','exports','module'],function (require, exports, module) {
function safeEval(data) {
    var wrapper = '{"data":' + data + '}';
    return JSON.parse(wrapper).data;
}

module.exports = {
    safeEval: safeEval
};
});

define('../../dependencies/miuri.min',['require','exports','module'],function (require, exports, module) {
(function(){var e,t,n,r,i,s,o,u,a,f,l,c={}.hasOwnProperty;l=/^(?:(\w+):\/\/)?(?:(\w+)(?::(\w+))?@)?([^:\/]+)?(?::(\d+))?(\/[^?#]*)?(?:\?([^#]*))?(?:#(.+))?/,f=["protocol","username","password","host","port","path","query","fragment"],s=typeof window!="undefined"&&window!==null?!1:!0,u=function(e){var t,n,r,i,s,o;if(!l.test(e))throw"Invalid uri";n=l.exec(e).slice(1),i={};for(t=s=0,o=f.length;s<o;t=++s)r=f[t],i[r]=n[t];return i},i=function(e){return"[object Array]"===Object.prototype.toString.call(e)},o=function(e){return"[object Object]"===Object.prototype.toString.call(e)},r=function(e,t){var n,r;for(n in t){if(!c.call(t,n))continue;r=t[n],e[n]=r}},a=function(e){var t,n,r,s,u,a,f,l,c,h;n=/\[([^\]]*)\]/,t={},c=e.split("&");for(f=0,l=c.length;f<l;f++){s=c[f],h=s.split("="),r=h[0],a=h[1],u=n.exec(r),a=decodeURIComponent(a);if(!u){t[r]=a;continue}u[1]&&!o(t[r])?t[r]={}:i(t[r])||(t[r]=[]),u[1]?t[r][u[1]]=a:t[r].push(a)}return t},n=function(e,t){var n,r,s,u;if(!i(t)&&!o(t))return""+e+"="+encodeURIComponent(t);f=[];if(i(t))for(s=0,u=t.length;s<u;s++)n=t[s],f.push(""+e+"[]="+encodeURIComponent(n));if(o(t))for(r in t){if(!c.call(t,r))continue;n=t[r],f.push(""+e+"["+r+"]="+encodeURIComponent(n))}return f.join("&")},t="/",typeof window!="undefined"&&window!==null&&window.location.host&&(t=window.location.href),e=function(){function e(e){this.uri=e!=null?e:t,this.parts=u(this.uri),this.parts.query=this.parts.query?a(this.parts.query):{},this.parts.path||(this.parts.path="/");return}return e.prototype.retrieve=function(e,t){return t==null&&(t=null),t===null?this.parts[e]:(this.parts[e]=t,this)},e.prototype.protocol=function(e){return this.retrieve("protocol",e)},e.prototype.username=function(e){return this.retrieve("username",e)},e.prototype.password=function(e){return this.retrieve("password",e)},e.prototype.host=function(e){return this.retrieve("host",e)},e.prototype.port=function(e){return this.retrieve("port",e)},e.prototype.path=function(e){return e&&e[0]!=="/"&&(e="/"+e),this.retrieve("path",e)},e.prototype.query=function(e,t){return e&&typeof e=="string"?t?(this.parts.query[e]=t,this):this.parts.query[e]:o(e)?(r(this.parts.query,e),this):this.parts.query},e.prototype.fragment=function(e){return this.retrieve("fragment",e)},e.prototype.toString=function(){var e,t,r,i,s;r="",this.parts.protocol&&this.parts.host&&(r+=""+this.parts.protocol+"://",this.parts.username&&this.parts.password?r+=""+this.parts.username+":"+this.parts.password+"@":this.parts.username&&(r+=""+this.parts.username+"@"),r+=this.parts.host),r+=this.parts.path,t=[],s=this.parts.query;for(e in s){if(!c.call(s,e))continue;i=s[e],t.push(n(e,i))}return t.length>0&&(r+="?"+t.join("&")),this.parts.fragment&&(r+="#"+this.parts.fragment),r},e}(),s?module.exports=e:this.miuri=e}).call(this);});

define('springPad',['require','exports','module','./settings','./utils','../../dependencies/miuri.min'],function (require, exports, module) {
var settings = require("./settings"),
    utils = require("./utils"),
    //authenticator = require("./auth"),
    Miuri = require("../../dependencies/miuri.min").miuri,
    authToken,
    apiUrl = "http://springpad.com/api",
    credentials = {
        username: "me",
        password: null 
    },
    BLOCK_ACCESS = "/users/" + credentials.username + "/blocks";

function authenticate() {
    // Will authenticate with the authenticator later
}


function login(username, password) {
    // Use authenticator to get the token
    // Set the token to authToken
    credentials.username = username || credentials.username;
    credentials.password = password || credentials.password;
    BLOCK_ACCESS = "/users/" + username + "/blocks";
}

function buildUrl(baseUrl, options) {
    var url = new Miuri(apiUrl + baseUrl).query(options); 
    return url.toString();
}

function makeRequest(url, callback) {
    console.log(url);
    // Use the token with the requester to request info
    // Plain HTTP Request for now
    var request = new XMLHttpRequest();
    request.open("GET", url, true);
    request.setRequestHeader("X-Spring-Username", credentials.username);
    request.setRequestHeader("X-Spring-Password", credentials.password);
    request.setRequestHeader("X-Spring-Api-Token", settings.auth.consumerKey);
    request.onreadystatechange = function () {
        if (request.readyState === 4 && request.status === 200)
        {
            callback(utils.safeEval(request.responseText));
        }
    };
    request.send();
}

function getNotebooks(options, callback) {
    var params = {
            type: "Workbook", 
            format: "minimal" 
        },
        requestUrl;

        for (option in options) {
            params[option] = options[option];
        }

        requestUrl = buildUrl(BLOCK_ACCESS, params);
    
    makeRequest(requestUrl, callback); 
}

function getBlock(uuid, options, callback) {
    var params = {
            format: "full"
        };
       
        // options are optional
        if (typeof options === "function") {
            callback = options;
        } else {
            for (option in options) {
                params[option] = options[option];
            }
        }
        
        requestUrl = buildUrl(BLOCK_ACCESS + "/" + uuid, params); 

    makeRequest(requestUrl, callback); 

}

function getItemsInNotebook(uuid, callback) {
}

module.exports = {
    login: login,
    buildUrl: buildUrl,
    getNotebooks: getNotebooks,
    getBlock: getBlock 
}

window.springPad = module.exports;
});

require(["springPad"]);
}());